// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id // Discord user ID
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Game data
  currency  Int      @default(1000)
  wins      Int      @default(0)
  losses    Int      @default(0)
  rank      String   @default("Bronze")
  
  // Owned characters - now using new system
  characters UserCharacter[]
  battles    Battle[]        @relation("UserBattles")
  
  @@map("users")
}

model UserCharacter {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Character data - now references CharacterName enum values
  characterName String  // References CharacterName enum (e.g., "Frieren", "Fern")
  level         Int     @default(1)
  currentXP     Int     @default(0)
  nickname      String? // Optional custom name
  
  // Current battle stats (derived from base stats + level + bonuses)
  currentHP     Int
  maxHP         Int
  currentMana   Int
  maxMana       Int
  
  // Individual Values (for stat variation between same characters)
  ivs           Json    // HP, Attack, Defense, MagicAttack, MagicDefense, Speed IVs
  totalIV       Int     @default(0) // Sum of all IVs
  ivPercent     Float   @default(0.0) // IV percentage (totalIV / 186 * 100)
  
  // Character customization (future expansion)
  customization Json    @default("{}") // Cosmetic customizations, alternate forms, etc.
  
  // Metadata
  isStarter     Boolean  @default(false) // Was this a starter character?
  obtainedFrom  String?  // "starter", "shop", "reward", "event", etc.
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Indexes for performance
  @@index([userId, characterName])
  @@map("user_characters")
}

model Battle {
  id          String   @id @default(cuid())
  
  // Participants
  player1Id   String
  player2Id   String?  // Null for AI battles
  player1     User     @relation("UserBattles", fields: [player1Id], references: [id])
  
  // Battle settings
  isAIBattle  Boolean  @default(true)
  aiMindset   String?  // AIMindset enum value
  
  // Battle state
  status      String   @default("waiting") // waiting, active, completed, cancelled
  winnerId    String?  // User ID of winner, null if ongoing
  
  // Battle teams (JSON arrays of character data used in this battle)
  player1Team Json     // Array of character snapshots at battle start
  player2Team Json?    // Array of character snapshots at battle start (null for AI)
  
  // Serialized battle data
  battleData  Json?    // Complete battle state for resuming
  battleLog   String[] @default([])
  
  // Battle results
  turns       Int?     // Number of turns the battle lasted
  duration    Int?     // Battle duration in seconds
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?
  
  @@map("battles")
}

model Tournament {
  id          String   @id @default(cuid())
  name        String
  description String
  
  // Tournament settings
  maxParticipants Int
  entryFee        Int     @default(0)
  prizePool       Int     @default(0)
  
  // Status
  status      String   @default("registration") // registration, active, completed
  startDate   DateTime
  endDate     DateTime?
  
  // Participants
  participants TournamentParticipant[]
  matches      TournamentMatch[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("tournaments")
}

model TournamentParticipant {
  id           String     @id @default(cuid())
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  userId       String
  
  // Participant data
  teamName     String?
  seed         Int?       // Tournament seeding
  eliminated   Boolean    @default(false)
  
  // Team snapshot at tournament start
  team         Json       // Array of UserCharacter snapshots
  
  createdAt    DateTime   @default(now())
  
  @@unique([tournamentId, userId])
  @@map("tournament_participants")
}

model TournamentMatch {
  id           String     @id @default(cuid())
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  
  // Match details
  round        Int
  matchNumber  Int
  player1Id    String
  player2Id    String
  winnerId     String?
  
  // Match data
  battleId     String?    // Reference to Battle if completed
  scheduledAt  DateTime?
  completedAt  DateTime?
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@map("tournament_matches")
}

model Shop {
  id          String   @id @default(cuid())
  itemType    String   // "character" only now (simplified)
  itemId      String   // Reference to CharacterName enum values
  
  price       Int
  currency    String   @default("coins")
  
  // Availability
  available   Boolean  @default(true)
  stock       Int?     // Null = unlimited
  
  // Featured/special items
  featured    Boolean  @default(false)
  discount    Int?     // Percentage discount
  
  // Rarity/tier info (derived from character level)
  tier        String   // Common, Uncommon, Rare, Epic, Legendary
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("shop_items")
}

model DailyReward {
  id        String   @id @default(cuid())
  userId    String
  
  // Reward details
  day       Int      // Day number in streak
  claimed   Boolean  @default(false)
  reward    Json     // Reward contents (currency, characters, etc.)
  
  // Timestamps
  date      DateTime @default(now()) // Date this reward is for
  claimedAt DateTime?
  
  @@unique([userId, date])
  @@map("daily_rewards")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  
  // Requirements
  type        String   // "wins", "battles", "characters_collected", etc.
  target      Int      // Target value to achieve
  reward      Json     // Reward for completion
  
  // Achievement unlocks
  unlockedBy  UserAchievement[]
  
  createdAt   DateTime @default(now())
  
  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  
  progress      Int         @default(0)
  completed     Boolean     @default(false)
  completedAt   DateTime?
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// New model for tracking character collection progress
model CharacterCollection {
  id            String   @id @default(cuid())
  userId        String
  characterName String   // CharacterName enum value
  
  // Collection stats
  timesObtained Int      @default(1)  // How many times user got this character
  firstObtained DateTime @default(now()) // When they first got it
  totalBattles  Int      @default(0)  // Battles fought with this character
  totalWins     Int      @default(0)  // Wins with this character
  
  @@unique([userId, characterName])
  @@map("character_collection")
}